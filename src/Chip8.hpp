#pragma once

#include "CPU.hpp"
#include "GPU.hpp"
#include "Screen.hpp"
#include <array>
#include <cstdint>
#include <memory>
#include <string>

namespace c8emu {
class Chip8 {
  using byte = std::uint8_t;

public:
  constexpr static std::uint32_t screenWidth = 64;
  constexpr static std::uint32_t screenHeight = 32;

  Chip8();

  Chip8(Chip8 const &) = delete;
  Chip8 &operator=(Chip8 const &) = delete;
  Chip8(Chip8 &&) = delete;
  Chip8 &operator=(Chip8 &&) = delete;

  void loadGame(std::string const &file);
  void play();

private:
  std::array<byte, 0x1000> m_memory;
  GPU m_gpu;
  CPU m_cpu;

  // IO
  std::array<bool, 16> m_keys;

  // Display
  Screen m_screen;

  constexpr static std::array<byte, 80> const fontset = {{
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80  // F
  }};
};
} // namespace c8emu
